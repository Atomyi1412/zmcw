name: Build DesktopPet (macOS DMG and Windows EXE Installer)

on:
  push:
    branches: [ main, dev ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, dev ]

permissions:
  contents: write

env:
  PYTHON_VERSION: '3.9'
  VERSION: ${{ github.ref_type == 'tag' && github.ref_name || format('build-{0}', github.run_number) }}

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build app with PyInstaller
        run: |
          python -m PyInstaller --noconfirm --name DesktopPet --windowed --add-data "assets:assets" main.py

      - name: Create DMG
        run: |
          hdiutil create -volname DesktopPet -srcfolder dist/DesktopPet.app DesktopPet-${{ env.VERSION }}-macOS.dmg

      - name: Upload artifacts (DMG)
        uses: actions/upload-artifact@v4
        with:
          name: DesktopPet-macOS-${{ env.VERSION }}
          path: DesktopPet-${{ env.VERSION }}-macOS.dmg

      - name: Upload artifacts (raw .app)
        uses: actions/upload-artifact@v4
        with:
          name: DesktopPet-macOS-app-${{ env.VERSION }}
          path: dist/DesktopPet.app

      - name: Publish Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            DesktopPet-${{ env.VERSION }}-macOS.dmg

  build-windows:
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build app with PyInstaller
        shell: pwsh
        run: |
          Write-Host "Building with PyInstaller..."
          python -m PyInstaller --noconfirm --name DesktopPet --windowed --add-data="assets;assets" main.py
          
          if (Test-Path "dist\DesktopPet") {
            Write-Host "✓ PyInstaller build successful"
            Write-Host "Contents:"
            Get-ChildItem "dist\DesktopPet" | ForEach-Object { Write-Host "  - $($_.Name)" }
          } else {
            Write-Error "PyInstaller build failed"
            exit 1
          }

      - name: Upload PyInstaller output
        uses: actions/upload-artifact@v4
        with:
          name: DesktopPet-Windows-folder-${{ env.VERSION }}
          path: dist/DesktopPet

      - name: Create EXE installer with Inno Setup
        shell: pwsh
        run: |
          Write-Host "Creating EXE installer with Inno Setup..."
          
          # Check if Inno Setup is available
          $innoPath = @(
            "C:\Program Files (x86)\Inno Setup 6",
            "C:\Program Files\Inno Setup 6"
          ) | Where-Object { Test-Path $_ } | Select-Object -First 1
          
          if ($innoPath) {
            Write-Host "Found Inno Setup at: $innoPath"
            $env:Path += ";$innoPath"
            
            # Create output directory
            New-Item -ItemType Directory -Force -Path "dist\installer"
            
            # Get absolute paths
            $currentDir = Get-Location
            $sourceDir = "$currentDir\dist\DesktopPet"
            $outputDir = "$currentDir\dist\installer"
            
            Write-Host "Current directory: $currentDir"
            Write-Host "Source directory: $sourceDir"
            Write-Host "Output directory: $outputDir"
            
            # Verify source exists
            if (Test-Path $sourceDir) {
              Write-Host "✓ Source directory exists"
              Get-ChildItem $sourceDir | ForEach-Object { Write-Host "  - $($_.Name)" }
            } else {
              Write-Error "Source directory not found: $sourceDir"
              exit 1
            }
            
            # Run Inno Setup with absolute paths
            $issCommand = "iscc"
            $issScript = "$currentDir\installer\desktop_pet.iss"
            $issArgs = @(
              $issScript,
              "/DAppVersion=${{ env.VERSION }}",
              "/DSourceDir=$sourceDir",
              "/DOutputDir=$outputDir",
              "/DOutBase=DesktopPet-${{ env.VERSION }}-Windows-Setup"
            )
            
            Write-Host "Running: $issCommand $($issArgs -join ' ')"
            
            try {
              & $issCommand @issArgs
              
              if (Test-Path "$outputDir\*.exe") {
                $exeFile = Get-ChildItem "$outputDir\*.exe" | Select-Object -First 1
                $exeSize = [math]::Round($exeFile.Length / 1MB, 2)
                Write-Host "✓ EXE installer created: $($exeFile.Name) ($exeSize MB)"
              } else {
                Write-Error "Installer creation failed - no EXE file found"
                exit 1
              }
            } catch {
              Write-Error "Inno Setup failed: $_"
              exit 1
            }
          } else {
            Write-Warning "Inno Setup not found in standard locations. Installing via Chocolatey..."
            choco install innosetup --no-progress -y
            
            # Re-check installation path
            $innoPath = @(
              "C:\Program Files (x86)\Inno Setup 6",
              "C:\Program Files\Inno Setup 6"
            ) | Where-Object { Test-Path $_ } | Select-Object -First 1
            
            if (-not $innoPath) {
              Write-Error "Inno Setup installation failed or path not found."
              exit 1
            }
            
            Write-Host "Inno Setup installed at: $innoPath"
            $env:Path += ";$innoPath"
            
            # Create output directory
            New-Item -ItemType Directory -Force -Path "dist\installer"
            
            # Get absolute paths
            $currentDir = Get-Location
            $sourceDir = "$currentDir\dist\DesktopPet"
            $outputDir = "$currentDir\dist\installer"
            
            # Run Inno Setup
            $issCommand = "iscc"
            $issScript = "$currentDir\installer\desktop_pet.iss"
            $issArgs = @(
              $issScript,
              "/DAppVersion=${{ env.VERSION }}",
              "/DSourceDir=$sourceDir",
              "/DOutputDir=$outputDir",
              "/DOutBase=DesktopPet-${{ env.VERSION }}-Windows-Setup"
            )
            
            Write-Host "Running after install: $issCommand $($issArgs -join ' ')"
            & $issCommand @issArgs
            
            if (Test-Path "$outputDir\*.exe") {
              $exeFile = Get-ChildItem "$outputDir\*.exe" | Select-Object -First 1
              $exeSize = [math]::Round($exeFile.Length / 1MB, 2)
              Write-Host "✓ EXE installer created: $($exeFile.Name) ($exeSize MB)"
            } else {
              Write-Error "Installer creation failed - no EXE file found (post-install)"
              exit 1
            }
          }

      - name: Upload installer (if created)
        uses: actions/upload-artifact@v4
        if: hashFiles('dist/installer/*.exe') != ''
        with:
          name: DesktopPet-Windows-Installer-${{ env.VERSION }}
          path: dist/installer/*.exe

      - name: Publish Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ github.workspace }}/dist/installer/*.exe