name: Build DesktopPet (macOS DMG and Windows EXE Installer)

on:
  push:
    branches: [ main, dev ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, dev ]

permissions:
  contents: write

env:
  PYTHON_VERSION: '3.9'
  VERSION: ${{ github.ref_type == 'tag' && github.ref_name || format('build-{0}', github.run_number) }}

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build app with PyInstaller
        run: |
          python -m PyInstaller --noconfirm --name DesktopPet --windowed --add-data "assets:assets" main.py

      - name: Create DMG
        run: |
          hdiutil create -volname DesktopPet -srcfolder dist/DesktopPet.app DesktopPet-${{ env.VERSION }}-macOS.dmg

      - name: Upload artifacts (DMG)
        uses: actions/upload-artifact@v4
        with:
          name: DesktopPet-macOS-${{ env.VERSION }}
          path: DesktopPet-${{ env.VERSION }}-macOS.dmg

      - name: Upload artifacts (raw .app)
        uses: actions/upload-artifact@v4
        with:
          name: DesktopPet-macOS-app-${{ env.VERSION }}
          path: dist/DesktopPet.app

      - name: Publish Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            DesktopPet-${{ env.VERSION }}-macOS.dmg

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Debug - List files before build
        shell: pwsh
        run: |
          Write-Host "Current directory contents:"
          Get-ChildItem -Recurse | Select-Object FullName
          Write-Host "Assets directory:"
          if (Test-Path "assets") {
            Get-ChildItem assets
          } else {
            Write-Host "Assets directory not found"
          }

      - name: Build app with PyInstaller
        shell: pwsh
        run: |
          Write-Host "Building with PyInstaller..."
          python -m PyInstaller --noconfirm --name DesktopPet --windowed --add-data="assets;assets" main.py
          Write-Host "PyInstaller completed. Checking output:"
          if (Test-Path "dist\DesktopPet") {
            Write-Host "✓ dist\DesktopPet directory created"
            Get-ChildItem "dist\DesktopPet" -Recurse | Select-Object FullName
          } else {
            Write-Error "✗ dist\DesktopPet directory not found"
            Get-ChildItem dist -Recurse
            exit 1
          }

      - name: Upload artifacts (PyInstaller output)
        uses: actions/upload-artifact@v4
        with:
          name: DesktopPet-Windows-folder-${{ env.VERSION }}
          path: dist/DesktopPet

      - name: Install Inno Setup
        shell: pwsh
        run: |
          Write-Host "Installing Inno Setup..."
          choco install innosetup -y
          Write-Host "Inno Setup installation completed"

      - name: Build Windows Installer (Inno Setup)
        shell: pwsh
        continue-on-error: true
        run: |
          Write-Host "Attempting to build installer..."
          
          # Create output directory
          New-Item -ItemType Directory -Force -Path "dist\installer"
          
          # Find Inno Setup
          $innoPath = "C:\Program Files (x86)\Inno Setup 6"
          if (-not (Test-Path $innoPath)) {
            $innoPath = "C:\Program Files\Inno Setup 6"
          }
          
          if (Test-Path $innoPath) {
            Write-Host "Found Inno Setup at: $innoPath"
            $env:Path += ";$innoPath"
            
            # Build installer
            Write-Host "Building installer with version: ${{ env.VERSION }}"
            try {
              iscc installer\desktop_pet.iss /DAppVersion=${{ env.VERSION }} /DSourceDir=dist\DesktopPet /DOutBase=DesktopPet-${{ env.VERSION }}-Windows-Setup
              Write-Host "✓ Installer built successfully"
            } catch {
              Write-Warning "Installer build failed: $_"
              Write-Host "Continuing without installer..."
            }
          } else {
            Write-Warning "Inno Setup not found, skipping installer creation"
          }

      - name: Upload artifacts (Installer - if exists)
        uses: actions/upload-artifact@v4
        if: hashFiles('dist/installer/*.exe') != ''
        with:
          name: DesktopPet-Windows-Installer-${{ env.VERSION }}
          path: dist/installer/*.exe

      - name: Publish Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/installer/*.exe