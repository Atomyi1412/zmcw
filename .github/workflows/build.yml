name: Build DesktopPet (macOS DMG and Windows EXE Installer)

on:
  push:
    branches: [ main, dev ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, dev ]

permissions:
  contents: write

env:
  PYTHON_VERSION: '3.9'
  VERSION: ${{ github.ref_type == 'tag' && github.ref_name || format('build-{0}', github.run_number) }}

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build app with PyInstaller
        run: |
          python -m PyInstaller --noconfirm --name DesktopPet --windowed --add-data "assets:assets" main.py

      - name: Create DMG
        run: |
          hdiutil create -volname DesktopPet -srcfolder dist/DesktopPet.app DesktopPet-${{ env.VERSION }}-macOS.dmg

      - name: Upload artifacts (DMG)
        uses: actions/upload-artifact@v4
        with:
          name: DesktopPet-macOS-${{ env.VERSION }}
          path: DesktopPet-${{ env.VERSION }}-macOS.dmg

      - name: Upload artifacts (raw .app)
        uses: actions/upload-artifact@v4
        with:
          name: DesktopPet-macOS-app-${{ env.VERSION }}
          path: dist/DesktopPet.app

      - name: Publish Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            DesktopPet-${{ env.VERSION }}-macOS.dmg

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Debug - List files before build
        shell: pwsh
        run: |
          Write-Host "Current directory contents:"
          Get-ChildItem -Recurse | Select-Object FullName
          Write-Host "Assets directory:"
          if (Test-Path "assets") {
            Get-ChildItem assets
          } else {
            Write-Host "Assets directory not found"
          }

      - name: Build app with PyInstaller
        shell: pwsh
        run: |
          Write-Host "Building with PyInstaller..."
          python -m PyInstaller --noconfirm --name DesktopPet --windowed --add-data="assets;assets" main.py
          Write-Host "PyInstaller completed. Checking output:"
          if (Test-Path "dist\DesktopPet") {
            Write-Host "✓ dist\DesktopPet directory created"
            Get-ChildItem "dist\DesktopPet" -Recurse | Select-Object FullName
          } else {
            Write-Error "✗ dist\DesktopPet directory not found"
            Get-ChildItem dist -Recurse
            exit 1
          }

      - name: Upload artifacts (PyInstaller output)
        uses: actions/upload-artifact@v4
        with:
          name: DesktopPet-Windows-folder-${{ env.VERSION }}
          path: dist/DesktopPet

      - name: Install Inno Setup
        shell: pwsh
        run: |
          Write-Host "Installing Inno Setup..."
          choco install innosetup -y
          Write-Host "Inno Setup installation completed"

      - name: Build Windows Installer (Inno Setup)
        shell: pwsh
        run: |
          Write-Host "Attempting to build installer..."
          
          # Create output directory with absolute path
          $outputDir = Join-Path $PWD "dist\installer"
          New-Item -ItemType Directory -Force -Path $outputDir
          Write-Host "Created output directory: $outputDir"
          
          # Find Inno Setup
          $innoPaths = @(
            "C:\Program Files (x86)\Inno Setup 6",
            "C:\Program Files\Inno Setup 6",
            "C:\Program Files (x86)\Inno Setup 5"
          )
          
          $innoPath = $null
          foreach ($path in $innoPaths) {
            if (Test-Path $path) {
              $innoPath = $path
              break
            }
          }
          
          if (-not $innoPath) {
            Write-Error "Inno Setup not found in any expected location"
            Write-Host "Searched paths:"
            $innoPaths | ForEach-Object { Write-Host "  - $_" }
            exit 1
          }
          
          Write-Host "Found Inno Setup at: $innoPath"
          $env:Path += ";$innoPath"
          
          # Verify iscc command is available
          try {
            $isccVersion = & iscc /?
            Write-Host "Inno Setup Compiler is available"
          } catch {
            Write-Error "Failed to run iscc command: $_"
            exit 1
          }
          
          # Verify source directory exists
          $sourceDir = Join-Path $PWD "dist\DesktopPet"
          if (-not (Test-Path $sourceDir)) {
            Write-Error "Source directory not found: $sourceDir"
            Write-Host "Available directories in dist:"
            Get-ChildItem "dist" | ForEach-Object { Write-Host "  - $($_.Name)" }
            exit 1
          }
          
          Write-Host "Source directory verified: $sourceDir"
          
          # Build installer with absolute paths
          $scriptPath = Join-Path $PWD "installer\desktop_pet.iss"
          $outputBase = "DesktopPet-${{ env.VERSION }}-Windows-Setup"
          
          Write-Host "Building installer with:"
          Write-Host "  Script: $scriptPath"
          Write-Host "  Version: ${{ env.VERSION }}"
          Write-Host "  Source: $sourceDir"
          Write-Host "  Output: $outputBase"
          
          $isccArgs = @(
            $scriptPath,
            "/DAppVersion=${{ env.VERSION }}",
            "/DSourceDir=$sourceDir",
            "/DOutBase=$outputBase",
            "/DOutputDir=$outputDir"
          )
          
          Write-Host "Running: iscc $($isccArgs -join ' ')"
          
          try {
            & iscc @isccArgs
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✓ Installer built successfully"
              
              # Verify output file exists
              $expectedOutput = Join-Path $outputDir "$outputBase.exe"
              if (Test-Path $expectedOutput) {
                Write-Host "✓ Installer file created: $expectedOutput"
                $fileInfo = Get-Item $expectedOutput
                Write-Host "  Size: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"
              } else {
                Write-Warning "Expected installer file not found: $expectedOutput"
                Write-Host "Files in output directory:"
                Get-ChildItem $outputDir | ForEach-Object { Write-Host "  - $($_.Name)" }
              }
            } else {
              Write-Error "Inno Setup compilation failed with exit code: $LASTEXITCODE"
              exit 1
            }
          } catch {
            Write-Error "Failed to run Inno Setup: $_"
            exit 1
          }

      - name: Verify installer creation
        shell: pwsh
        run: |
          Write-Host "Checking for installer files..."
          $installerDir = "dist\installer"
          if (Test-Path $installerDir) {
            $installerFiles = Get-ChildItem $installerDir -Filter "*.exe"
            if ($installerFiles.Count -gt 0) {
              Write-Host "✓ Found $($installerFiles.Count) installer file(s):"
              $installerFiles | ForEach-Object {
                Write-Host "  - $($_.Name) ($([math]::Round($_.Length / 1MB, 2)) MB)"
              }
            } else {
              Write-Warning "No .exe files found in installer directory"
              Write-Host "Contents of installer directory:"
              Get-ChildItem $installerDir | ForEach-Object { Write-Host "  - $($_.Name)" }
            }
          } else {
            Write-Warning "Installer directory not found: $installerDir"
          }

      - name: Upload artifacts (Installer)
        uses: actions/upload-artifact@v4
        with:
          name: DesktopPet-Windows-Installer-${{ env.VERSION }}
          path: dist/installer/*.exe

      - name: Publish Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/installer/*.exe