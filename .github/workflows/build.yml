name: Build DesktopPet (macOS DMG and Windows EXE Installer)

on:
  push:
    branches: [ main, dev ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, dev ]

permissions:
  contents: write

env:
  PYTHON_VERSION: '3.9'
  VERSION: ${{ github.ref_type == 'tag' && github.ref_name || format('build-{0}', github.run_number) }}

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build app with PyInstaller
        run: |
          python -m PyInstaller --noconfirm --name DesktopPet --windowed --add-data "assets:assets" main.py

      - name: Create DMG
        run: |
          hdiutil create -volname DesktopPet -srcfolder dist/DesktopPet.app DesktopPet-${{ env.VERSION }}-macOS.dmg

      - name: Upload artifacts (DMG)
        uses: actions/upload-artifact@v4
        with:
          name: DesktopPet-macOS-${{ env.VERSION }}
          path: DesktopPet-${{ env.VERSION }}-macOS.dmg

      - name: Upload artifacts (raw .app)
        uses: actions/upload-artifact@v4
        with:
          name: DesktopPet-macOS-app-${{ env.VERSION }}
          path: dist/DesktopPet.app

      - name: Publish Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            DesktopPet-${{ env.VERSION }}-macOS.dmg

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build app with PyInstaller
        shell: pwsh
        run: |
          python -m PyInstaller --noconfirm --name DesktopPet --windowed --add-data=assets;assets main.py

      - name: Install Inno Setup
        shell: pwsh
        run: |
          choco install innosetup -y

      - name: Build Windows Installer (Inno Setup)
        shell: pwsh
        run: |
          # Build installer using our .iss script
          $env:Path += ";C:\\Program Files (x86)\\Inno Setup 6";
          iscc installer\\desktop_pet.iss /DAppVersion=${{ env.VERSION }} /DSourceDir=dist\\DesktopPet /DOutBase=DesktopPet-${{ env.VERSION }}-Windows-Setup

      - name: Upload artifacts (Installer)
        uses: actions/upload-artifact@v4
        with:
          name: DesktopPet-Windows-${{ env.VERSION }}
          path: dist/installer/*.exe

      - name: Upload artifacts (raw folder)
        uses: actions/upload-artifact@v4
        with:
          name: DesktopPet-Windows-folder-${{ env.VERSION }}
          path: dist/DesktopPet

      - name: Publish Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/installer/*.exe